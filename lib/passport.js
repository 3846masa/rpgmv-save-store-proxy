'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _co = require('co');

var _express = require('express');

var _fsPromise = require('fs-promise');

var _fsPromise2 = _interopRequireDefault(_fsPromise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _passport = require('passport');

var _passport2 = _interopRequireDefault(_passport);

var _passportHttp = require('passport-http');

var _json5Promise = require('./json5-promise.js');

var _json5Promise2 = _interopRequireDefault(_json5Promise);

var _appRootPath = require('app-root-path');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_passport2.default.use(new _passportHttp.DigestStrategy({ qop: 'auth' }, authenticate, (params, done) => done(null, true)));

function authenticate(username, done) {
  (0, _co.wrap)(function* () {
    let usersListData = yield _fsPromise2.default.readFile(_path2.default.resolve(_appRootPath.path, 'user.json5'));
    let usersList = yield _json5Promise2.default.parse(usersListData);
    let user = usersList.reduce((x, y) => x && x.username === username ? x : y && y.username === username ? y : null);
    if (!user) return false;else return [user, user.password];
  })().then(val => {
    val.unshift(false);done.apply(null, val);
  }).catch(_e => done(_e));
}

let router = (0, _express.Router)();
router.use(_passport2.default.initialize());
router.use(_passport2.default.session());
router.use(_passport2.default.authenticate('digest', { session: false }));

exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXNzcG9ydC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVFBLG1CQUFTLEdBQUcsQ0FBQyxrQkFKSixjQUFjLENBS3JCLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUNmLFlBQVksRUFDWixDQUFDLE1BQU0sRUFBRSxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FDbkMsQ0FBQyxDQUFDOztBQUVILFNBQVMsWUFBWSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUU7QUFDcEMsZ0JBQUMsYUFBWTtBQUNYLFFBQUksYUFBYSxHQUFHLE1BQU0sb0JBQUcsUUFBUSxDQUFDLGVBQUssT0FBTyxjQVY3QyxJQUFJLEVBVXlELFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDakYsUUFBSSxTQUFTLEdBQUcsTUFBTSx1QkFBYSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDeEQsUUFBSSxJQUFJLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQy9CLEFBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxHQUFJLENBQUMsR0FDbEMsQUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsS0FBSyxRQUFRLEdBQUksQ0FBQyxHQUFHLElBQUksQUFDMUMsQ0FBQyxDQUFDO0FBQ0gsUUFBSSxDQUFDLElBQUksRUFBRSxPQUFPLEtBQUssQ0FBQyxLQUNuQixPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztHQUNuQyxHQUFHLENBQ0gsSUFBSSxDQUFDLEFBQUMsR0FBRyxJQUFLO0FBQUUsT0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0dBQUUsQ0FBQyxDQUM3RCxLQUFLLENBQUMsQUFBQyxFQUFFLElBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDMUI7O0FBRUQsSUFBSSxNQUFNLEdBQUcsYUE3QkosTUFBTSxHQTZCTSxDQUFDO0FBQ3RCLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUJBQVMsVUFBVSxFQUFFLENBQUMsQ0FBQztBQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDLG1CQUFTLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDL0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQkFBUyxZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzs7a0JBRWpELE1BQU0iLCJmaWxlIjoicGFzc3BvcnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBmcyBmcm9tICdmcy1wcm9taXNlJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHBhc3Nwb3J0IGZyb20gJ3Bhc3Nwb3J0JztcbmltcG9ydCB7IERpZ2VzdFN0cmF0ZWd5IH0gZnJvbSAncGFzc3BvcnQtaHR0cCc7XG5pbXBvcnQgSlNPTjVQcm9taXNlIGZyb20gJy4vanNvbjUtcHJvbWlzZS5qcyc7XG5pbXBvcnQgeyBwYXRoIGFzIEFQUF9ST09UX1BBVEggfSBmcm9tICdhcHAtcm9vdC1wYXRoJztcblxucGFzc3BvcnQudXNlKG5ldyBEaWdlc3RTdHJhdGVneShcbiAgeyBxb3A6ICdhdXRoJyB9LFxuICBhdXRoZW50aWNhdGUsXG4gIChwYXJhbXMsIGRvbmUpID0+IGRvbmUobnVsbCwgdHJ1ZSlcbikpO1xuXG5mdW5jdGlvbiBhdXRoZW50aWNhdGUodXNlcm5hbWUsIGRvbmUpIHtcbiAgKGFzeW5jICgpID0+IHtcbiAgICBsZXQgdXNlcnNMaXN0RGF0YSA9IGF3YWl0IGZzLnJlYWRGaWxlKHBhdGgucmVzb2x2ZShBUFBfUk9PVF9QQVRILCAndXNlci5qc29uNScpKTtcbiAgICBsZXQgdXNlcnNMaXN0ID0gYXdhaXQgSlNPTjVQcm9taXNlLnBhcnNlKHVzZXJzTGlzdERhdGEpO1xuICAgIGxldCB1c2VyID0gdXNlcnNMaXN0LnJlZHVjZSgoeCwgeSkgPT4gKFxuICAgICAgKHggJiYgeC51c2VybmFtZSA9PT0gdXNlcm5hbWUpID8geCA6XG4gICAgICAoeSAmJiB5LnVzZXJuYW1lID09PSB1c2VybmFtZSkgPyB5IDogbnVsbFxuICAgICkpO1xuICAgIGlmICghdXNlcikgcmV0dXJuIGZhbHNlO1xuICAgIGVsc2UgcmV0dXJuIFt1c2VyLCB1c2VyLnBhc3N3b3JkXTtcbiAgfSkoKVxuICAudGhlbigodmFsKSA9PiB7IHZhbC51bnNoaWZ0KGZhbHNlKTsgZG9uZS5hcHBseShudWxsLCB2YWwpOyB9KVxuICAuY2F0Y2goKF9lKSA9PiBkb25lKF9lKSk7XG59XG5cbmxldCByb3V0ZXIgPSBSb3V0ZXIoKTtcbnJvdXRlci51c2UocGFzc3BvcnQuaW5pdGlhbGl6ZSgpKTtcbnJvdXRlci51c2UocGFzc3BvcnQuc2Vzc2lvbigpKTtcbnJvdXRlci51c2UocGFzc3BvcnQuYXV0aGVudGljYXRlKCdkaWdlc3QnLCB7IHNlc3Npb246IGZhbHNlIH0pKTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl19