'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _co = require('co');

var _express = require('express');

var _validUrl = require('valid-url');

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _streamBuffers = require('stream-buffers');

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let router = (0, _express.Router)();

let proxy = (function () {
  var ref = (0, _co.wrap)(function* (req, res) {
    let reqUrl = req.url.substr(1);
    let filename = _url2.default.parse(reqUrl).pathname.split('/').reverse()[0];
    let fetchRes = yield (0, _nodeFetch2.default)(reqUrl, {
      method: req.method,
      headers: Object.assign({}, req.headers, {
        authorization: undefined,
        host: undefined,
        referer: undefined
      })
    });

    res.status(fetchRes.status);
    Object.keys(fetchRes.headers._headers).forEach(key => {
      if ('content-encoding' === key.toLowerCase()) return;
      let normalizedKey = key.toLowerCase().split('-').map(c => c.replace(/^./, c => c.toUpperCase())).join('-');
      res.setHeader(normalizedKey, fetchRes.headers._headers[key]);
    });

    if (filename === '' || filename.match(/^index\..*$/)) {
      res.setHeader('Cache-Control', 'private, no-store, no-cache, must-revalidate');
      let body = insertScript((yield fetchRes.text()));
      body.pipe(res);
      return body;
    } else {
      fetchRes.body.pipe(res);
      return fetchRes.body;
    }
  });
  return function proxy(_x, _x2) {
    return ref.apply(this, arguments);
  };
})();

let insertScript = body => {
  let $ = _cheerio2.default.load(body);
  $('title').text($('title').text() + ' (via proxy)');
  $('head').append('<script src="/lib/save-store.js"></script>');
  let bodyPipe = new _streamBuffers.ReadableStreamBuffer();
  bodyPipe.put($.html(), 'utf8');
  bodyPipe.destroySoon();
  return bodyPipe;
};

router.use((req, res, next) => {
  let reqUrl = req.url.substr(1);
  if (!(0, _validUrl.isUri)(reqUrl)) next();else {
    proxy(req, res).then(body => {
      return new Promise(resolve => {
        body.on('end', resolve);
      });
    }).then(() => next()).catch(_e => next(_e));
  }
});

exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ycGdtdi1zYXZlLXN0b3JlLXByb3h5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQSxJQUFJLE1BQU0sR0FBRyxhQVBKLE1BQU0sR0FPTSxDQUFDOztBQUV0QixJQUFJLEtBQUs7MEJBQUcsV0FBTyxHQUFHLEVBQUUsR0FBRyxFQUFLO0FBQzlCLFFBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUksUUFBUSxHQUFHLGNBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEUsUUFBSSxRQUFRLEdBQUcsTUFBTSx5QkFBTSxNQUFNLEVBQUU7QUFDakMsWUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO0FBQ2xCLGFBQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFO0FBQ3RDLHFCQUFhLEVBQUUsU0FBUztBQUN4QixZQUFJLEVBQUUsU0FBUztBQUNmLGVBQU8sRUFBRSxTQUFTO09BQ25CLENBQUM7S0FDSCxDQUFDLENBQUM7O0FBRUgsT0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUIsVUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxBQUFDLEdBQUcsSUFBSztBQUN0RCxVQUFJLGtCQUFrQixLQUFLLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxPQUFPO0FBQ3JELFVBQUksYUFBYSxHQUNmLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FDYixLQUFLLENBQUMsR0FBRyxDQUFDLENBQ1YsR0FBRyxDQUFDLEFBQUMsQ0FBQyxJQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEFBQUMsQ0FBQyxJQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQ25ELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQixTQUFHLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQzlELENBQUMsQ0FBQzs7QUFFSCxRQUFJLFFBQVEsS0FBSyxFQUFFLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUNwRCxTQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSw4Q0FBOEMsQ0FBQyxDQUFDO0FBQy9FLFVBQUksSUFBSSxHQUFHLFlBQVksRUFBQyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDLENBQUM7QUFDL0MsVUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNmLGFBQU8sSUFBSSxDQUFDO0tBQ2IsTUFBTTtBQUNMLGNBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLGFBQU8sUUFBUSxDQUFDLElBQUksQ0FBQztLQUN0QjtHQUNGO2tCQWhDRyxLQUFLOzs7SUFnQ1IsQ0FBQzs7QUFFRixJQUFJLFlBQVksR0FBRyxBQUFDLElBQUksSUFBSztBQUMzQixNQUFJLENBQUMsR0FBRyxrQkFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsR0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7QUFDcEQsR0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0FBQy9ELE1BQUksUUFBUSxHQUFHLG1CQTNDUixvQkFBb0IsRUEyQ2MsQ0FBQztBQUMxQyxVQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUMvQixVQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDdkIsU0FBTyxRQUFRLENBQUM7Q0FDakIsQ0FBQzs7QUFFRixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEtBQUs7QUFDN0IsTUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsTUFBSSxDQUFDLGNBdERFLEtBQUssRUFzREksTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsS0FDM0I7QUFDSCxTQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUNaLElBQUksQ0FBQyxBQUFDLElBQUksSUFBSztBQUNkLGFBQU8sSUFBSSxPQUFPLENBQUMsQUFBQyxPQUFPLElBQUs7QUFDOUIsWUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7T0FDekIsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUNELElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQ2xCLEtBQUssQ0FBQyxBQUFDLEVBQUUsSUFBSyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztHQUM1QjtDQUNGLENBQUMsQ0FBQzs7a0JBRVksTUFBTSIsImZpbGUiOiJycGdtdi1zYXZlLXN0b3JlLXByb3h5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBpc1VyaSBhcyBpc1ZhbGlkVXJsIH0gZnJvbSAndmFsaWQtdXJsJztcbmltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmltcG9ydCB1cmwgZnJvbSAndXJsJztcbmltcG9ydCB7IFJlYWRhYmxlU3RyZWFtQnVmZmVyIH0gZnJvbSAnc3RyZWFtLWJ1ZmZlcnMnO1xuaW1wb3J0IGNoZWVyaW8gZnJvbSAnY2hlZXJpbyc7XG5cbmxldCByb3V0ZXIgPSBSb3V0ZXIoKTtcblxubGV0IHByb3h5ID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIGxldCByZXFVcmwgPSByZXEudXJsLnN1YnN0cigxKTtcbiAgbGV0IGZpbGVuYW1lID0gdXJsLnBhcnNlKHJlcVVybCkucGF0aG5hbWUuc3BsaXQoJy8nKS5yZXZlcnNlKClbMF07XG4gIGxldCBmZXRjaFJlcyA9IGF3YWl0IGZldGNoKHJlcVVybCwge1xuICAgIG1ldGhvZDogcmVxLm1ldGhvZCxcbiAgICBoZWFkZXJzOiBPYmplY3QuYXNzaWduKHt9LCByZXEuaGVhZGVycywge1xuICAgICAgYXV0aG9yaXphdGlvbjogdW5kZWZpbmVkLFxuICAgICAgaG9zdDogdW5kZWZpbmVkLFxuICAgICAgcmVmZXJlcjogdW5kZWZpbmVkXG4gICAgfSlcbiAgfSk7XG5cbiAgcmVzLnN0YXR1cyhmZXRjaFJlcy5zdGF0dXMpO1xuICBPYmplY3Qua2V5cyhmZXRjaFJlcy5oZWFkZXJzLl9oZWFkZXJzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoJ2NvbnRlbnQtZW5jb2RpbmcnID09PSBrZXkudG9Mb3dlckNhc2UoKSkgcmV0dXJuO1xuICAgIGxldCBub3JtYWxpemVkS2V5ID1cbiAgICAgIGtleS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAuc3BsaXQoJy0nKVxuICAgICAgICAgLm1hcCgoYykgPT4gYy5yZXBsYWNlKC9eLi8sIChjKSA9PiBjLnRvVXBwZXJDYXNlKCkpKVxuICAgICAgICAgLmpvaW4oJy0nKTtcbiAgICByZXMuc2V0SGVhZGVyKG5vcm1hbGl6ZWRLZXksIGZldGNoUmVzLmhlYWRlcnMuX2hlYWRlcnNba2V5XSk7XG4gIH0pO1xuXG4gIGlmIChmaWxlbmFtZSA9PT0gJycgfHwgZmlsZW5hbWUubWF0Y2goL15pbmRleFxcLi4qJC8pKSB7XG4gICAgcmVzLnNldEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICdwcml2YXRlLCBuby1zdG9yZSwgbm8tY2FjaGUsIG11c3QtcmV2YWxpZGF0ZScpO1xuICAgIGxldCBib2R5ID0gaW5zZXJ0U2NyaXB0KGF3YWl0IGZldGNoUmVzLnRleHQoKSk7XG4gICAgYm9keS5waXBlKHJlcyk7XG4gICAgcmV0dXJuIGJvZHk7XG4gIH0gZWxzZSB7XG4gICAgZmV0Y2hSZXMuYm9keS5waXBlKHJlcyk7XG4gICAgcmV0dXJuIGZldGNoUmVzLmJvZHk7XG4gIH1cbn07XG5cbmxldCBpbnNlcnRTY3JpcHQgPSAoYm9keSkgPT4ge1xuICBsZXQgJCA9IGNoZWVyaW8ubG9hZChib2R5KTtcbiAgJCgndGl0bGUnKS50ZXh0KCQoJ3RpdGxlJykudGV4dCgpICsgJyAodmlhIHByb3h5KScpO1xuICAkKCdoZWFkJykuYXBwZW5kKCc8c2NyaXB0IHNyYz1cIi9saWIvc2F2ZS1zdG9yZS5qc1wiPjwvc2NyaXB0PicpO1xuICBsZXQgYm9keVBpcGUgPSBuZXcgUmVhZGFibGVTdHJlYW1CdWZmZXIoKTtcbiAgYm9keVBpcGUucHV0KCQuaHRtbCgpLCAndXRmOCcpO1xuICBib2R5UGlwZS5kZXN0cm95U29vbigpO1xuICByZXR1cm4gYm9keVBpcGU7XG59O1xuXG5yb3V0ZXIudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBsZXQgcmVxVXJsID0gcmVxLnVybC5zdWJzdHIoMSk7XG4gIGlmICghaXNWYWxpZFVybChyZXFVcmwpKSBuZXh0KCk7XG4gIGVsc2Uge1xuICAgIHByb3h5KHJlcSwgcmVzKVxuICAgICAgLnRoZW4oKGJvZHkpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgYm9keS5vbignZW5kJywgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IG5leHQoKSlcbiAgICAgIC5jYXRjaCgoX2UpID0+IG5leHQoX2UpKTtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjtcbiJdfQ==