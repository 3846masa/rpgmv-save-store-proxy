'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _co = require('co');

var _express = require('express');

var _validUrl = require('valid-url');

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _streamBuffers = require('stream-buffers');

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let router = (0, _express.Router)();

let proxy = (function () {
  var ref = (0, _co.wrap)(function* (req, res) {
    let reqUrl = req.url.substr(1);
    let filename = _url2.default.parse(reqUrl).pathname.split('/').reverse()[0];
    let fetchRes = yield (0, _nodeFetch2.default)(reqUrl, {
      method: req.method,
      headers: Object.assign({}, req.headers, {
        authorization: undefined,
        host: undefined,
        referer: undefined
      })
    });

    res.status(fetchRes.status);
    Object.keys(fetchRes.headers._headers).forEach(key => {
      if ('content-encoding' === key.toLowerCase()) return;
      let normalizedKey = key.toLowerCase().split('-').map(c => c.replace(/^./, c => c.toUpperCase())).join('-');
      res.setHeader(normalizedKey, fetchRes.headers._headers[key]);
    });

    if (filename === '' || filename.match(/^index\..*$/)) {
      res.setHeader('Cache-Control', 'private, no-store, no-cache, must-revalidate');
      insertScript((yield fetchRes.text())).pipe(res);
    } else {
      fetchRes.body.pipe(res);
    }
  });
  return function proxy(_x, _x2) {
    return ref.apply(this, arguments);
  };
})();

let insertScript = body => {
  let $ = _cheerio2.default.load(body);
  $('title').text($('title').text() + ' (via proxy)');
  $('head').append('<script src="/lib/save-store.js"></script>');
  let bodyPipe = new _streamBuffers.ReadableStreamBuffer();
  bodyPipe.put($.html(), 'utf8');
  bodyPipe.destroySoon();
  return bodyPipe;
};

router.use((req, res, next) => {
  let reqUrl = req.url.substr(1);
  if (!(0, _validUrl.isUri)(reqUrl)) next();else {
    proxy(req, res).then(() => next()).catch(_e => next(_e));
  }
});

exports.default = router;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ycGdtdi1zYXZlLXN0b3JlLXByb3h5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFPQSxJQUFJLE1BQU0sR0FBRyxhQVBKLE1BQU0sR0FPTSxDQUFDOztBQUV0QixJQUFJLEtBQUs7MEJBQUcsV0FBTyxHQUFHLEVBQUUsR0FBRyxFQUFLO0FBQzlCLFFBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLFFBQUksUUFBUSxHQUFHLGNBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEUsUUFBSSxRQUFRLEdBQUcsTUFBTSx5QkFBTSxNQUFNLEVBQUU7QUFDakMsWUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO0FBQ2xCLGFBQU8sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFO0FBQ3RDLHFCQUFhLEVBQUUsU0FBUztBQUN4QixZQUFJLEVBQUUsU0FBUztBQUNmLGVBQU8sRUFBRSxTQUFTO09BQ25CLENBQUM7S0FDSCxDQUFDLENBQUM7O0FBRUgsT0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUIsVUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxBQUFDLEdBQUcsSUFBSztBQUN0RCxVQUFJLGtCQUFrQixLQUFLLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxPQUFPO0FBQ3JELFVBQUksYUFBYSxHQUNmLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FDYixLQUFLLENBQUMsR0FBRyxDQUFDLENBQ1YsR0FBRyxDQUFDLEFBQUMsQ0FBQyxJQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEFBQUMsQ0FBQyxJQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQ25ELElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoQixTQUFHLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQzlELENBQUMsQ0FBQzs7QUFFSCxRQUFJLFFBQVEsS0FBSyxFQUFFLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUNwRCxTQUFHLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSw4Q0FBOEMsQ0FBQyxDQUFDO0FBQy9FLGtCQUFZLEVBQUMsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMvQyxNQUFNO0FBQ0wsY0FBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDekI7R0FDRjtrQkE3QkcsS0FBSzs7O0lBNkJSLENBQUM7O0FBRUYsSUFBSSxZQUFZLEdBQUcsQUFBQyxJQUFJLElBQUs7QUFDM0IsTUFBSSxDQUFDLEdBQUcsa0JBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLEdBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDO0FBQ3BELEdBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsNENBQTRDLENBQUMsQ0FBQztBQUMvRCxNQUFJLFFBQVEsR0FBRyxtQkF4Q1Isb0JBQW9CLEVBd0NjLENBQUM7QUFDMUMsVUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0IsVUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCLFNBQU8sUUFBUSxDQUFDO0NBQ2pCLENBQUM7O0FBRUYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxLQUFLO0FBQzdCLE1BQUksTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLE1BQUksQ0FBQyxjQW5ERSxLQUFLLEVBbURJLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEtBQzNCO0FBQ0gsU0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FDWixJQUFJLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUNsQixLQUFLLENBQUMsQUFBQyxFQUFFLElBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7R0FDNUI7Q0FDRixDQUFDLENBQUM7O2tCQUVZLE1BQU0iLCJmaWxlIjoicnBnbXYtc2F2ZS1zdG9yZS1wcm94eS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgaXNVcmkgYXMgaXNWYWxpZFVybCB9IGZyb20gJ3ZhbGlkLXVybCc7XG5pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgeyBSZWFkYWJsZVN0cmVhbUJ1ZmZlciB9IGZyb20gJ3N0cmVhbS1idWZmZXJzJztcbmltcG9ydCBjaGVlcmlvIGZyb20gJ2NoZWVyaW8nO1xuXG5sZXQgcm91dGVyID0gUm91dGVyKCk7XG5cbmxldCBwcm94eSA9IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICBsZXQgcmVxVXJsID0gcmVxLnVybC5zdWJzdHIoMSk7XG4gIGxldCBmaWxlbmFtZSA9IHVybC5wYXJzZShyZXFVcmwpLnBhdGhuYW1lLnNwbGl0KCcvJykucmV2ZXJzZSgpWzBdO1xuICBsZXQgZmV0Y2hSZXMgPSBhd2FpdCBmZXRjaChyZXFVcmwsIHtcbiAgICBtZXRob2Q6IHJlcS5tZXRob2QsXG4gICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7fSwgcmVxLmhlYWRlcnMsIHtcbiAgICAgIGF1dGhvcml6YXRpb246IHVuZGVmaW5lZCxcbiAgICAgIGhvc3Q6IHVuZGVmaW5lZCxcbiAgICAgIHJlZmVyZXI6IHVuZGVmaW5lZFxuICAgIH0pXG4gIH0pO1xuXG4gIHJlcy5zdGF0dXMoZmV0Y2hSZXMuc3RhdHVzKTtcbiAgT2JqZWN0LmtleXMoZmV0Y2hSZXMuaGVhZGVycy5faGVhZGVycykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKCdjb250ZW50LWVuY29kaW5nJyA9PT0ga2V5LnRvTG93ZXJDYXNlKCkpIHJldHVybjtcbiAgICBsZXQgbm9ybWFsaXplZEtleSA9XG4gICAgICBrZXkudG9Mb3dlckNhc2UoKVxuICAgICAgICAgLnNwbGl0KCctJylcbiAgICAgICAgIC5tYXAoKGMpID0+IGMucmVwbGFjZSgvXi4vLCAoYykgPT4gYy50b1VwcGVyQ2FzZSgpKSlcbiAgICAgICAgIC5qb2luKCctJyk7XG4gICAgcmVzLnNldEhlYWRlcihub3JtYWxpemVkS2V5LCBmZXRjaFJlcy5oZWFkZXJzLl9oZWFkZXJzW2tleV0pO1xuICB9KTtcblxuICBpZiAoZmlsZW5hbWUgPT09ICcnIHx8IGZpbGVuYW1lLm1hdGNoKC9eaW5kZXhcXC4uKiQvKSkge1xuICAgIHJlcy5zZXRIZWFkZXIoJ0NhY2hlLUNvbnRyb2wnLCAncHJpdmF0ZSwgbm8tc3RvcmUsIG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGUnKTtcbiAgICBpbnNlcnRTY3JpcHQoYXdhaXQgZmV0Y2hSZXMudGV4dCgpKS5waXBlKHJlcyk7XG4gIH0gZWxzZSB7XG4gICAgZmV0Y2hSZXMuYm9keS5waXBlKHJlcyk7XG4gIH1cbn07XG5cbmxldCBpbnNlcnRTY3JpcHQgPSAoYm9keSkgPT4ge1xuICBsZXQgJCA9IGNoZWVyaW8ubG9hZChib2R5KTtcbiAgJCgndGl0bGUnKS50ZXh0KCQoJ3RpdGxlJykudGV4dCgpICsgJyAodmlhIHByb3h5KScpO1xuICAkKCdoZWFkJykuYXBwZW5kKCc8c2NyaXB0IHNyYz1cIi9saWIvc2F2ZS1zdG9yZS5qc1wiPjwvc2NyaXB0PicpO1xuICBsZXQgYm9keVBpcGUgPSBuZXcgUmVhZGFibGVTdHJlYW1CdWZmZXIoKTtcbiAgYm9keVBpcGUucHV0KCQuaHRtbCgpLCAndXRmOCcpO1xuICBib2R5UGlwZS5kZXN0cm95U29vbigpO1xuICByZXR1cm4gYm9keVBpcGU7XG59O1xuXG5yb3V0ZXIudXNlKChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICBsZXQgcmVxVXJsID0gcmVxLnVybC5zdWJzdHIoMSk7XG4gIGlmICghaXNWYWxpZFVybChyZXFVcmwpKSBuZXh0KCk7XG4gIGVsc2Uge1xuICAgIHByb3h5KHJlcSwgcmVzKVxuICAgICAgLnRoZW4oKCkgPT4gbmV4dCgpKVxuICAgICAgLmNhdGNoKChfZSkgPT4gbmV4dChfZSkpO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcm91dGVyO1xuIl19